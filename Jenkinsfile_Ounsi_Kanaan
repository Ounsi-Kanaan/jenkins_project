pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}/${VIRTUAL_ENV}")) {
                        bat "python -m venv ${VIRTUAL_ENV}"
                    }
                    bat "venv\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    bat "venv\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    echo "Running code coverage analysis..."
                    bat "venv\\Scripts\\activate && pip install coverage"
                    bat "venv\\Scripts\\activate && coverage run -m pytest"
                    bat "venv\\Scripts\\activate && coverage report"
                    bat "venv\\Scripts\\activate && coverage html"  // Generates an HTML report
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo "Running security scan..."
                    bat "venv\\Scripts\\activate && pip install bandit"
                    bat "venv\\Scripts\\activate && bandit -r app.py"  // Scans app.py for vulnerabilities
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    def deployDirectory = 'C:\\Users\\user\\Desktop\\Courses\\2024-2025\\Fall\\EECE 435L\\Lab 10'
                    echo "Deploying application..."

                    // Ensure the deployment directory exists
                    bat "if not exist \"${deployDirectory}\" mkdir \"${deployDirectory}\""
            
                    // Copy app.py to the deployment directory
                    bat "copy app.py \"${deployDirectory}\""
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
