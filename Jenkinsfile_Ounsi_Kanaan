pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
    }
    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}/${VIRTUAL_ENV}")) {
                        bat "python -m venv ${VIRTUAL_ENV}"
                    }
                    bat "venv\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        stage('Lint') {
            steps {
                script {
                    bat "venv\\Scripts\\activate && flake8 app.py"
                }
            }
        }
        stage('Coverage') {
            steps {
                script {
                    echo "Running code coverage analysis..."
                    bat "venv\\Scripts\\activate && pip install coverage"
                    bat "venv\\Scripts\\activate && coverage run -m pytest"
                    bat "venv\\Scripts\\activate && coverage report"
                    bat "venv\\Scripts\\activate && coverage html"  // Generates an HTML report
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo "Running security scan..."
                    bat "venv\\Scripts\\activate && pip install bandit"
                    bat "venv\\Scripts\\activate && bandit -r app.py"  // Scans app.py for vulnerabilities
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    echo "Deploying application..."
                    // Simple deployment script - for local server, or you can replace it with SSH deployment
                    bat "echo Deploying to local server..."
                    bat "copy app.py C:\\Users\\user\\Desktop\\Courses\\2024-2025\\Fall\\EECE 435L\\Lab 10" 
                    // For remote deployment, you can replace the copy command with a remote server deployment tool
                    // bat "scp app.py user@remote-server:/path/to/deploy"  // Uncomment for remote deployment using SCP
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
